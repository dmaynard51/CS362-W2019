        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:
        -:   10:
        -:   11:
        -:   12:// runs the tests
        1:   13:int main () {
        -:   14:    
        -:   15:    //create kingdom cards
        1:   16:    int randomNumber = 1000;
        1:   17:    int kingdomCards[10] = {adventurer, council_room, 
        -:   18:    feast, gardens, mine, remodel, smithy, village, 
        -:   19:    treasure_map, outpost};
        1:   20:    int seed = 1500;
        1:   21:    int playerNumber = 2;
        -:   22:    struct gameState gstate;
        -:   23:    int initGame;
        -:   24:    int handCount;
        -:   25:    int i;
        1:   26:    int bonus = 1;
        1:   27:    int player = 0;
        -:   28: 
        1:   29:    memset(&gstate,15,sizeof(struct gameState));
        1:   30:    initializeGame(playerNumber, kingdomCards, seed, &gstate);
        -:   31:    
        -:   32:    //set the deckCount to 0, which should return 0
        1:   33:    gstate.deckCount[player] = 0;
        1:   34:    printf("Should return -1 since deckCount is 0 : %i\n", shuffle(player, &gstate));
        1:   35:    printf("PASS!\n");
        1:   36:    gstate.deckCount[player] = 10;
        1:   37:    printf("Should return 0 since the deck count is not 0 : %i\n", shuffle(player, &gstate));
        1:   38:    printf("PASS!\n");
        1:   39:    gstate.deckCount[player] = 15;
        1:   40:    printf("Should return 0 since the deck count is not 0 : %i\n", shuffle(player, &gstate));
        1:   41:    printf("PASS!\n");
        1:   42:    gstate.deckCount[player] = -2;
        1:   43:    printf("Should return -1 since deckCount is 0 : %i\n", shuffle(player, &gstate));
        1:   44:    printf("PASS!\n");
        1:   45:    return 0;
        -:   46:    
        -:   47:}
