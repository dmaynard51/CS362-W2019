        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:
        -:    9:
        -:   10:
        -:   11:
        -:   12:// runs the tests
        1:   13:int main () {
        -:   14:    
        -:   15:    //create kingdom cards
        1:   16:    int randomNumber = 1000;
        1:   17:    int kingdomCards[10] = {adventurer, council_room, 
        -:   18:    feast, gardens, mine, remodel, smithy, village, 
        -:   19:    treasure_map, minion};
        1:   20:    int seed = 1500;
        1:   21:    int playerNumber = 2;
        -:   22:    struct gameState gstate;
        -:   23:    struct gameState gstate2;
        -:   24:    int initGame;
        -:   25:    int handCount;
        -:   26:    int i;
        1:   27:    int bonus = 1;
        1:   28:    int player = 0;
        1:   29:    int choice1 = 1;
        1:   30:    int choice2 = 0;
        1:   31:    int choice3 = 0;
        1:   32:    int handPos1 = 0;
        -:   33:
        -:   34:    
        -:   35:    int cardEffect1;
        -:   36:    
        -:   37:    
        1:   38:    memset(&gstate,15,sizeof(struct gameState));
        -:   39:    
        -:   40:    //holds the current game state
        1:   41:    memset(&gstate2,15,sizeof(struct gameState));
        1:   42:    initializeGame(playerNumber, kingdomCards, seed, &gstate);
        1:   43:    initializeGame(playerNumber, kingdomCards, seed, &gstate2);
        -:   44:    //set player0 cards to 0
        1:   45:    gstate.handCount[player] = 1;
        -:   46:    
        -:   47:    //should print out 0
        1:   48:    printf("hand count should be: %i\n", gstate.handCount[player]);
        -:   49:    
        -:   50:    //should increase cards by 3
        1:   51:    cardEffect1 = cardEffect(council_room, choice1, choice2, choice3, &gstate, handPos1, &bonus);
        -:   52:    
        -:   53:    //should print out 2
        1:   54:    printf("if hand count is anything other than 0 then FAIL.\n");
        1:   55:    printf("hand count reduced by 1 %i\n", gstate.handCount[player]);
        1:   56:    printf("FAIL!\n");
        -:   57:    
        -:   58:    //check if any of the cards are treasure
        -:   59:    
        1:   60:    int card = 0;
        -:   61:    int treasure;
        3:   62:    for (i=0; i < gstate.handCount[player]; i++)
        -:   63:    {
        -:   64:        
        2:   65:        if(gstate.hand[player][i] == copper || gstate.hand[player][i] == silver || gstate.hand[player][i] == gold)
        -:   66:        {
        2:   67:            treasure++;
        -:   68:        }
        -:   69:    }
        -:   70:    
        -:   71:    int treasure2;
        6:   72:    for (i=0; i < gstate2.handCount[player]; i++)
        -:   73:    {
        -:   74:        
        5:   75:        if(gstate2.hand[player][i] == copper || gstate2.hand[player][i] == silver || gstate2.hand[player][i] == gold)
        -:   76:        {
        4:   77:            treasure2++;
        -:   78:        }
        -:   79:    }    
        -:   80:    
        1:   81:    printf("handcount after %i\n", gstate.handCount[player]);
        -:   82:    
        -:   83:    //printf("handcount before %i\n", gstate2.handCount[player]);
        -:   84:    
        1:   85:    printf("Pass if treasure is 2.\n");
        1:   86:    printf("treasure is %i\n", treasure);
        1:   87:    printf("PASS!\n");
        -:   88:    //printf("Original treasure %i\n", treasure2);
        1:   89:    printf("Original adventurer supply: %i\n", gstate2.supplyCount[council_room]);
        1:   90:    printf("Updated adventurer supply: %i\n", gstate.supplyCount[council_room]);
        1:   91:    printf("FAIL, council room should be reduced!");
       11:   92:    for (i = 0 ; i < 10; i++)
        -:   93:    {
       10:   94:        printf("kingdom cards %i\n", kingdomCards[i]);
        -:   95:    }
        -:   96:    //int smithCard( struct gameState *state, int handPos)
        -:   97:    //int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:   98:    
        -:   99:    
        -:  100:    /*
        -:  101:    //set the deckCount to 0, which should return 0
        -:  102:    gstate.deckCount[player] = 0;
        -:  103:    printf("Should return -1 since deckCount is 0 : %i\n", shuffle(player, &gstate));
        -:  104:    
        -:  105:    gstate.deckCount[player] = 10;
        -:  106:    printf("Should return 0 since the deck count is not 0 : %i\n", shuffle(player, &gstate));
        -:  107:    
        -:  108:    gstate.deckCount[player] = 15;
        -:  109:        printf("Should return 0 since the deck count is not 0 : %i\n", shuffle(player, &gstate));
        -:  110:    
        -:  111:    gstate.deckCount[player] = -2;
        -:  112:    printf("Should return -1 since deckCount is 0 : %i\n", shuffle(player, &gstate)); */
        1:  113:    return 0;
        -:  114:    
        -:  115:}
