        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:/*
        -:    9:I have refactored smithy, adventurer, embargo, councilroom and greathall into
        -:   10:their own functions.
        -:   11:
        -:   12:
        -:   13:
        -:   14:*/
        -:   15:
       60:   16:int compare(const void* a, const void* b) {
       60:   17:  if (*(int*)a > *(int*)b)
    #####:   18:    return 1;
       60:   19:  if (*(int*)a < *(int*)b)
       16:   20:    return -1;
       44:   21:  return 0;
        -:   22:}
        -:   23:
    #####:   24:struct gameState* newGame() {
    #####:   25:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   26:  return g;
        -:   27:}
        -:   28:
    #####:   29:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   30:		  int k8, int k9, int k10) {
    #####:   31:  int* k = malloc(10 * sizeof(int));
    #####:   32:  k[0] = k1;
    #####:   33:  k[1] = k2;
    #####:   34:  k[2] = k3;
    #####:   35:  k[3] = k4;
    #####:   36:  k[4] = k5;
    #####:   37:  k[5] = k6;
    #####:   38:  k[6] = k7;
    #####:   39:  k[7] = k8;
    #####:   40:  k[8] = k9;
    #####:   41:  k[9] = k10;
    #####:   42:  return k;
        -:   43:}
        -:   44:
        2:   45:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   46:		   struct gameState *state) {
        -:   47:
        -:   48:  int i;
        -:   49:  int j;
        -:   50:  int it;			
        -:   51:  //set up random number generator
        2:   52:  SelectStream(1);
        2:   53:  PutSeed((long)randomSeed);
        -:   54:  
        -:   55:  //check number of players
        2:   56:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   57:    {
    #####:   58:      return -1;
        -:   59:    }
        -:   60:
        -:   61:  //set number of players
        2:   62:  state->numPlayers = numPlayers;
        -:   63:
        -:   64:  //check selected kingdom cards are different
       22:   65:  for (i = 0; i < 10; i++)
        -:   66:    {
      220:   67:      for (j = 0; j < 10; j++)
        -:   68:        {
      200:   69:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   70:	    {
    #####:   71:	      return -1;
        -:   72:	    }
        -:   73:        }
        -:   74:    }
        -:   75:
        -:   76:
        -:   77:  //initialize supply
        -:   78:  ///////////////////////////////
        -:   79:
        -:   80:  //set number of Curse cards
        2:   81:  if (numPlayers == 2)
        -:   82:    {
        2:   83:      state->supplyCount[curse] = 10;
        -:   84:    }
    #####:   85:  else if (numPlayers == 3)
        -:   86:    {
    #####:   87:      state->supplyCount[curse] = 20;
        -:   88:    }
        -:   89:  else
        -:   90:    {
    #####:   91:      state->supplyCount[curse] = 30;
        -:   92:    }
        -:   93:
        -:   94:  //set number of Victory cards
        2:   95:  if (numPlayers == 2)
        -:   96:    {
        2:   97:      state->supplyCount[estate] = 8;
        2:   98:      state->supplyCount[duchy] = 8;
        2:   99:      state->supplyCount[province] = 8;
        -:  100:    }
        -:  101:  else
        -:  102:    {
    #####:  103:      state->supplyCount[estate] = 12;
    #####:  104:      state->supplyCount[duchy] = 12;
    #####:  105:      state->supplyCount[province] = 12;
        -:  106:    }
        -:  107:
        -:  108:  //set number of Treasure cards
        2:  109:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        2:  110:  state->supplyCount[silver] = 40;
        2:  111:  state->supplyCount[gold] = 30;
        -:  112:
        -:  113:  //set number of Kingdom cards
       42:  114:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  115:    {
      330:  116:      for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  117:	{
      310:  118:	  if (kingdomCards[j] == i)
        -:  119:	    {
        -:  120:	      //check if card is a 'Victory' Kingdom card
       20:  121:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  122:		{
        4:  123:		  if (numPlayers == 2){ 
        2:  124:		    state->supplyCount[i] = 8; 
        -:  125:		  }
    #####:  126:		  else{ state->supplyCount[i] = 12; }
        -:  127:		}
        -:  128:	      else
        -:  129:		{
       18:  130:		  state->supplyCount[i] = 10;
        -:  131:		}
       20:  132:	      break;
        -:  133:	    }
        -:  134:	  else    //card is not in the set choosen for the game
        -:  135:	    {
      290:  136:	      state->supplyCount[i] = -1;
        -:  137:	    }
        -:  138:	}
        -:  139:
        -:  140:    }
        -:  141:
        -:  142:  ////////////////////////
        -:  143:  //supply intilization complete
        -:  144:
        -:  145:  //set player decks
        6:  146:  for (i = 0; i < numPlayers; i++)
        -:  147:    {
        4:  148:      state->deckCount[i] = 0;
       16:  149:      for (j = 0; j < 3; j++)
        -:  150:	{
       12:  151:	  state->deck[i][j] = estate;
       12:  152:	  state->deckCount[i]++;
        -:  153:	}
       32:  154:      for (j = 3; j < 10; j++)
        -:  155:	{
       28:  156:	  state->deck[i][j] = copper;
       28:  157:	  state->deckCount[i]++;		
        -:  158:	}
        -:  159:    }
        -:  160:
        -:  161:  //shuffle player decks
        6:  162:  for (i = 0; i < numPlayers; i++)
        -:  163:    {
        4:  164:      if ( shuffle(i, state) < 0 )
        -:  165:	{
    #####:  166:	  return -1;
        -:  167:	}
        -:  168:    }
        -:  169:
        -:  170:  //draw player hands
        6:  171:  for (i = 0; i < numPlayers; i++)
        -:  172:    {  
        -:  173:      //initialize hand size to zero
        4:  174:      state->handCount[i] = 0;
        4:  175:      state->discardCount[i] = 0;
        -:  176:      //draw 5 cards
        -:  177:      // for (j = 0; j < 5; j++)
        -:  178:      //	{
        -:  179:      //	  drawCard(i, state);
        -:  180:      //	}
        -:  181:    }
        -:  182:  
        -:  183:  //set embargo tokens to 0 for all supply piles
       56:  184:  for (i = 0; i <= treasure_map; i++)
        -:  185:    {
       54:  186:      state->embargoTokens[i] = 0;
        -:  187:    }
        -:  188:
        -:  189:  //initialize first player's turn
        2:  190:  state->outpostPlayed = 0;
        2:  191:  state->phase = 0;
        2:  192:  state->numActions = 1;
        2:  193:  state->numBuys = 1;
        2:  194:  state->playedCardCount = 0;
        2:  195:  state->whoseTurn = 0;
        2:  196:  state->handCount[state->whoseTurn] = 0;
        -:  197:  //int it; move to top
        -:  198:
        -:  199:  //Moved draw cards to here, only drawing at the start of a turn
       12:  200:  for (it = 0; it < 5; it++){
       10:  201:    drawCard(state->whoseTurn, state);
        -:  202:  }
        -:  203:
        2:  204:  updateCoins(state->whoseTurn, state, 0);
        -:  205:
        2:  206:  return 0;
        -:  207:}
        -:  208:
        4:  209:int shuffle(int player, struct gameState *state) {
        -:  210: 
        -:  211:
        -:  212:  int newDeck[MAX_DECK];
        4:  213:  int newDeckPos = 0;
        -:  214:  int card;
        -:  215:  int i;
        -:  216:
        4:  217:  if (state->deckCount[player] < 1)
    #####:  218:    return -1;
        4:  219:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  220:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  221:
       48:  222:  while (state->deckCount[player] > 0) {
       40:  223:    card = floor(Random() * state->deckCount[player]);
       40:  224:    newDeck[newDeckPos] = state->deck[player][card];
       40:  225:    newDeckPos++;
      146:  226:    for (i = card; i < state->deckCount[player]-1; i++) {
      106:  227:      state->deck[player][i] = state->deck[player][i+1];
        -:  228:    }
       40:  229:    state->deckCount[player]--;
        -:  230:  }
       44:  231:  for (i = 0; i < newDeckPos; i++) {
       40:  232:    state->deck[player][i] = newDeck[i];
       40:  233:    state->deckCount[player]++;
        -:  234:  }
        -:  235:
        4:  236:  return 0;
        -:  237:}
        -:  238:
    #####:  239:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  240:{	
        -:  241:  int card;
    #####:  242:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  243:
        -:  244:  //check if it is the right phase
    #####:  245:  if (state->phase != 0)
        -:  246:    {
    #####:  247:      return -1;
        -:  248:    }
        -:  249:	
        -:  250:  //check if player has enough actions
    #####:  251:  if ( state->numActions < 1 )
        -:  252:    {
    #####:  253:      return -1;
        -:  254:    }
        -:  255:	
        -:  256:  //get card played
    #####:  257:  card = handCard(handPos, state);
        -:  258:	
        -:  259:  //check if selected card is an action
    #####:  260:  if ( card < adventurer || card > treasure_map )
        -:  261:    {
    #####:  262:      return -1;
        -:  263:    }
        -:  264:	
        -:  265:  //play card
    #####:  266:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  267:    {
    #####:  268:      return -1;
        -:  269:    }
        -:  270:	
        -:  271:  //reduce number of actions
    #####:  272:  state->numActions--;
        -:  273:
        -:  274:  //update coins (Treasure cards may be added with card draws)
    #####:  275:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  276:	
    #####:  277:  return 0;
        -:  278:}
        -:  279:
    #####:  280:int buyCard(int supplyPos, struct gameState *state) {
        -:  281:  int who;
        -:  282:  if (DEBUG){
        -:  283:    printf("Entering buyCard...\n");
        -:  284:  }
        -:  285:
        -:  286:  // I don't know what to do about the phase thing.
        -:  287:
    #####:  288:  who = state->whoseTurn;
        -:  289:
    #####:  290:  if (state->numBuys < 1){
        -:  291:    if (DEBUG)
        -:  292:      printf("You do not have any buys left\n");
    #####:  293:    return -1;
    #####:  294:  } else if (supplyCount(supplyPos, state) <1){
        -:  295:    if (DEBUG)
        -:  296:      printf("There are not any of that type of card left\n");
    #####:  297:    return -1;
    #####:  298:  } else if (state->coins < getCost(supplyPos)){
        -:  299:    if (DEBUG) 
        -:  300:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  301:    return -1;
        -:  302:  } else {
    #####:  303:    state->phase=1;
        -:  304:    //state->supplyCount[supplyPos]--;
    #####:  305:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  306:  
    #####:  307:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  308:    state->numBuys--;
        -:  309:    if (DEBUG)
        -:  310:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  311:  }
        -:  312:
        -:  313:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  314:  //state->discardCount[who]++;
        -:  315:    
    #####:  316:  return 0;
        -:  317:}
        -:  318:
    #####:  319:int numHandCards(struct gameState *state) {
    #####:  320:  return state->handCount[ whoseTurn(state) ];
        -:  321:}
        -:  322:
    #####:  323:int handCard(int handPos, struct gameState *state) {
    #####:  324:  int currentPlayer = whoseTurn(state);
    #####:  325:  return state->hand[currentPlayer][handPos];
        -:  326:}
        -:  327:
    #####:  328:int supplyCount(int card, struct gameState *state) {
    #####:  329:  return state->supplyCount[card];
        -:  330:}
        -:  331:
    #####:  332:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  333:  int i;
    #####:  334:  int count = 0;
        -:  335:
    #####:  336:  for (i = 0; i < state->deckCount[player]; i++)
        -:  337:    {
    #####:  338:      if (state->deck[player][i] == card) count++;
        -:  339:    }
        -:  340:
    #####:  341:  for (i = 0; i < state->handCount[player]; i++)
        -:  342:    {
    #####:  343:      if (state->hand[player][i] == card) count++;
        -:  344:    }
        -:  345:
    #####:  346:  for (i = 0; i < state->discardCount[player]; i++)
        -:  347:    {
    #####:  348:      if (state->discard[player][i] == card) count++;
        -:  349:    }
        -:  350:
    #####:  351:  return count;
        -:  352:}
        -:  353:
        2:  354:int whoseTurn(struct gameState *state) {
        2:  355:  return state->whoseTurn;
        -:  356:}
        -:  357:
    #####:  358:int endTurn(struct gameState *state) {
        -:  359:  int k;
        -:  360:  int i;
    #####:  361:  int currentPlayer = whoseTurn(state);
        -:  362:  
        -:  363:  //Discard hand
    #####:  364:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  365:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  366:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  367:  }
    #####:  368:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  369:    
        -:  370:  //Code for determining the player
    #####:  371:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  372:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  373:  }
        -:  374:  else{
    #####:  375:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  376:  }
        -:  377:
    #####:  378:  state->outpostPlayed = 0;
    #####:  379:  state->phase = 0;
    #####:  380:  state->numActions = 1;
    #####:  381:  state->coins = 0;
    #####:  382:  state->numBuys = 1;
    #####:  383:  state->playedCardCount = 0;
    #####:  384:  state->handCount[state->whoseTurn] = 0;
        -:  385:
        -:  386:  //int k; move to top
        -:  387:  //Next player draws hand
    #####:  388:  for (k = 0; k < 5; k++){
    #####:  389:    drawCard(state->whoseTurn, state);//Draw a card
        -:  390:  }
        -:  391:
        -:  392:  //Update money
    #####:  393:  updateCoins(state->whoseTurn, state , 0);
        -:  394:
    #####:  395:  return 0;
        -:  396:}
        -:  397:
    #####:  398:int isGameOver(struct gameState *state) {
        -:  399:  int i;
        -:  400:  int j;
        -:  401:	
        -:  402:  //if stack of Province cards is empty, the game ends
    #####:  403:  if (state->supplyCount[province] == 0)
        -:  404:    {
    #####:  405:      return 1;
        -:  406:    }
        -:  407:
        -:  408:  //if three supply pile are at 0, the game ends
    #####:  409:  j = 0;
    #####:  410:  for (i = 0; i < 25; i++)
        -:  411:    {
    #####:  412:      if (state->supplyCount[i] == 0)
        -:  413:	{
    #####:  414:	  j++;
        -:  415:	}
        -:  416:    }
    #####:  417:  if ( j >= 3)
        -:  418:    {
    #####:  419:      return 1;
        -:  420:    }
        -:  421:
    #####:  422:  return 0;
        -:  423:}
        -:  424:
    #####:  425:int scoreFor (int player, struct gameState *state) {
        -:  426:
        -:  427:  int i;
    #####:  428:  int score = 0;
        -:  429:  //score from hand
    #####:  430:  for (i = 0; i < state->handCount[player]; i++)
        -:  431:    {
    #####:  432:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  433:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  434:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  435:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  436:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  437:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  438:    }
        -:  439:
        -:  440:  //score from discard
    #####:  441:  for (i = 0; i < state->discardCount[player]; i++)
        -:  442:    {
    #####:  443:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  444:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  445:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  446:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  447:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  448:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  449:    }
        -:  450:
        -:  451:  //score from deck
    #####:  452:  for (i = 0; i < state->discardCount[player]; i++)
        -:  453:    {
    #####:  454:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  455:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  456:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  457:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  458:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  459:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  460:    }
        -:  461:
    #####:  462:  return score;
        -:  463:}
        -:  464:
    #####:  465:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  466:  int i;	
        -:  467:  int j;
        -:  468:  int highScore;
        -:  469:  int currentPlayer;
        -:  470:
        -:  471:  //get score for each player
    #####:  472:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  473:    {
        -:  474:      //set unused player scores to -9999
    #####:  475:      if (i >= state->numPlayers)
        -:  476:	{
    #####:  477:	  players[i] = -9999;
        -:  478:	}
        -:  479:      else
        -:  480:	{
    #####:  481:	  players[i] = scoreFor (i, state);
        -:  482:	}
        -:  483:    }
        -:  484:
        -:  485:  //find highest score
    #####:  486:  j = 0;
    #####:  487:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  488:    {
    #####:  489:      if (players[i] > players[j])
        -:  490:	{
    #####:  491:	  j = i;
        -:  492:	}
        -:  493:    }
    #####:  494:  highScore = players[j];
        -:  495:
        -:  496:  //add 1 to players who had less turns
    #####:  497:  currentPlayer = whoseTurn(state);
    #####:  498:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  499:    {
    #####:  500:      if ( players[i] == highScore && i > currentPlayer )
        -:  501:	{
    #####:  502:	  players[i]++;
        -:  503:	}
        -:  504:    }
        -:  505:
        -:  506:  //find new highest score
    #####:  507:  j = 0;
    #####:  508:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  509:    {
    #####:  510:      if ( players[i] > players[j] )
        -:  511:	{
    #####:  512:	  j = i;
        -:  513:	}
        -:  514:    }
    #####:  515:  highScore = players[j];
        -:  516:
        -:  517:  //set winners in array to 1 and rest to 0
    #####:  518:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  519:    {
    #####:  520:      if ( players[i] == highScore )
        -:  521:	{
    #####:  522:	  players[i] = 1;
        -:  523:	}
        -:  524:      else
        -:  525:	{
    #####:  526:	  players[i] = 0;
        -:  527:	}
        -:  528:    }
        -:  529:
    #####:  530:  return 0;
        -:  531:}
        -:  532:
       13:  533:int drawCard(int player, struct gameState *state)
        -:  534:{	int count;
        -:  535:  int deckCounter;
       13:  536:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  537:    
        -:  538:    //Step 1 Shuffle the discard pile back into a deck
        -:  539:    int i;
        -:  540:    //Move discard to deck
    #####:  541:    for (i = 0; i < state->discardCount[player];i++){
    #####:  542:      state->deck[player][i] = state->discard[player][i];
    #####:  543:      state->discard[player][i] = -1;
        -:  544:    }
        -:  545:
    #####:  546:    state->deckCount[player] = state->discardCount[player];
    #####:  547:    state->discardCount[player] = 0;//Reset discard
        -:  548:
        -:  549:    //Shufffle the deck
    #####:  550:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  551:   
        -:  552:    if (DEBUG){//Debug statements
        -:  553:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  554:    }
        -:  555:    
    #####:  556:    state->discardCount[player] = 0;
        -:  557:
        -:  558:    //Step 2 Draw Card
    #####:  559:    count = state->handCount[player];//Get current player's hand count
        -:  560:    
        -:  561:    if (DEBUG){//Debug statements
        -:  562:      printf("Current hand count: %d\n", count);
        -:  563:    }
        -:  564:    
    #####:  565:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  566:
    #####:  567:    if (deckCounter == 0)
    #####:  568:      return -1;
        -:  569:
    #####:  570:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  571:    state->deckCount[player]--;
    #####:  572:    state->handCount[player]++;//Increment hand count
        -:  573:  }
        -:  574:
        -:  575:  else{
       13:  576:    int count = state->handCount[player];//Get current hand count for player
        -:  577:    int deckCounter;
        -:  578:    if (DEBUG){//Debug statements
        -:  579:      printf("Current hand count: %d\n", count);
        -:  580:    }
        -:  581:
       13:  582:    deckCounter = state->deckCount[player];//Create holder for the deck count
       13:  583:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       13:  584:    state->deckCount[player]--;
       13:  585:    state->handCount[player]++;//Increment hand count
        -:  586:  }
        -:  587:
       13:  588:  return 0;
        -:  589:}
        -:  590:
    #####:  591:int getCost(int cardNumber)
        -:  592:{
    #####:  593:  switch( cardNumber ) 
        -:  594:    {
        -:  595:    case curse:
    #####:  596:      return 0;
        -:  597:    case estate:
    #####:  598:      return 2;
        -:  599:    case duchy:
    #####:  600:      return 5;
        -:  601:    case province:
    #####:  602:      return 8;
        -:  603:    case copper:
    #####:  604:      return 0;
        -:  605:    case silver:
    #####:  606:      return 3;
        -:  607:    case gold:
    #####:  608:      return 6;
        -:  609:    case adventurer:
    #####:  610:      return 6;
        -:  611:    case council_room:
    #####:  612:      return 5;
        -:  613:    case feast:
    #####:  614:      return 4;
        -:  615:    case gardens:
    #####:  616:      return 4;
        -:  617:    case mine:
    #####:  618:      return 5;
        -:  619:    case remodel:
    #####:  620:      return 4;
        -:  621:    case smithy:
    #####:  622:      return 4;
        -:  623:    case village:
    #####:  624:      return 3;
        -:  625:    case baron:
    #####:  626:      return 4;
        -:  627:    case great_hall:
    #####:  628:      return 3;
        -:  629:    case minion:
    #####:  630:      return 5;
        -:  631:    case steward:
    #####:  632:      return 3;
        -:  633:    case tribute:
    #####:  634:      return 5;
        -:  635:    case ambassador:
    #####:  636:      return 3;
        -:  637:    case cutpurse:
    #####:  638:      return 4;
        -:  639:    case embargo: 
    #####:  640:      return 2;
        -:  641:    case outpost:
    #####:  642:      return 5;
        -:  643:    case salvager:
    #####:  644:      return 4;
        -:  645:    case sea_hag:
    #####:  646:      return 4;
        -:  647:    case treasure_map:
    #####:  648:      return 4;
        -:  649:    }
        -:  650:	
    #####:  651:  return -1;
        -:  652:}
        -:  653:
        1:  654:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  655:{
        -:  656:  int i;
        -:  657:  int j;
        -:  658:  int k;
        -:  659:  int x;
        -:  660:  int index;
        1:  661:  int currentPlayer = whoseTurn(state);
        1:  662:  int nextPlayer = currentPlayer + 1;
        -:  663:
        1:  664:  int tributeRevealedCards[2] = {-1, -1};
        -:  665:  int temphand[MAX_HAND];// moved above the if statement
        -:  666:  //int drawntreasure=0;
        -:  667:  //int cardDrawn;
        -:  668:  //int z = 0;// this is the counter for the temp hand
        1:  669:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  670:    nextPlayer = 0;
        -:  671:  }
        -:  672:  
        -:  673:	
        -:  674:  //uses switch to select card and perform actions
        1:  675:  switch( card ) 
        -:  676:    {
        -:  677:    case adventurer:
    #####:  678:    adventurerCard(state); /*
        -:  679:      while(drawntreasure<2){
        -:  680:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  681:	  shuffle(currentPlayer, state);
        -:  682:	}
        -:  683:	drawCard(currentPlayer, state);
        -:  684:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  685:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  686:	  drawntreasure++;
        -:  687:	else{
        -:  688:	  temphand[z]=cardDrawn;
        -:  689:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  690:	  z++;
        -:  691:	}
        -:  692:      }
        -:  693:      while(z-1>=0){
        -:  694:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  695:	z=z-1;
        -:  696:      }
        -:  697:      return 0;*/
        -:  698:			
        -:  699:    case council_room:
        1:  700:    return councilRoomCard(state, handPos);
        -:  701:    /*
        -:  702:      //+4 Cards
        -:  703:      for (i = 0; i < 4; i++)
        -:  704:	{
        -:  705:	  drawCard(currentPlayer, state);
        -:  706:	}
        -:  707:			
        -:  708:      //+1 Buy
        -:  709:      state->numBuys++;
        -:  710:			
        -:  711:      //Each other player draws a card
        -:  712:      for (i = 0; i < state->numPlayers; i++)
        -:  713:	{
        -:  714:	  if ( i != currentPlayer )
        -:  715:	    {
        -:  716:	      drawCard(i, state);
        -:  717:	    }
        -:  718:	}
        -:  719:			
        -:  720:      //put played card in played card pile
        -:  721:      discardCard(handPos, currentPlayer, state, 0);
        -:  722:			
        -:  723:      return 0;
        -:  724:			*/
        -:  725:    case feast:
        -:  726:      //gain card with cost up to 5
        -:  727:      //Backup hand
    #####:  728:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  729:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  730:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  731:      }
        -:  732:      //Backup hand
        -:  733:
        -:  734:      //Update Coins for Buy
    #####:  735:      updateCoins(currentPlayer, state, 5);
    #####:  736:      x = 1;//Condition to loop on
    #####:  737:      while( x == 1) {//Buy one card
    #####:  738:	if (supplyCount(choice1, state) <= 0){
        -:  739:	  if (DEBUG)
        -:  740:	    printf("None of that card left, sorry!\n");
        -:  741:
        -:  742:	  if (DEBUG){
        -:  743:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  744:	  }
        -:  745:	}
    #####:  746:	else if (state->coins < getCost(choice1)){
    #####:  747:	  printf("That card is too expensive!\n");
        -:  748:
        -:  749:	  if (DEBUG){
        -:  750:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  751:	  }
        -:  752:	}
        -:  753:	else{
        -:  754:
        -:  755:	  if (DEBUG){
        -:  756:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  757:	  }
        -:  758:
    #####:  759:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  760:	  x = 0;//No more buying cards
        -:  761:
        -:  762:	  if (DEBUG){
        -:  763:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  764:	  }
        -:  765:
        -:  766:	}
        -:  767:      }     
        -:  768:
        -:  769:      //Reset Hand
    #####:  770:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  771:	state->hand[currentPlayer][i] = temphand[i];
    #####:  772:	temphand[i] = -1;
        -:  773:      }
        -:  774:      //Reset Hand
        -:  775:      			
    #####:  776:      return 0;
        -:  777:			
        -:  778:    case gardens:
    #####:  779:      return -1;
        -:  780:			
        -:  781:    case mine:
    #####:  782:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  783:
    #####:  784:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  785:	{
    #####:  786:	  return -1;
        -:  787:	}
        -:  788:		
    #####:  789:      if (choice2 > treasure_map || choice2 < curse)
        -:  790:	{
    #####:  791:	  return -1;
        -:  792:	}
        -:  793:
    #####:  794:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  795:	{
    #####:  796:	  return -1;
        -:  797:	}
        -:  798:
    #####:  799:      gainCard(choice2, state, 2, currentPlayer);
        -:  800:
        -:  801:      //discard card from hand
    #####:  802:      discardCard(handPos, currentPlayer, state, 0);
        -:  803:
        -:  804:      //discard trashed card
    #####:  805:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  806:	{
    #####:  807:	  if (state->hand[currentPlayer][i] == j)
        -:  808:	    {
    #####:  809:	      discardCard(i, currentPlayer, state, 0);			
    #####:  810:	      break;
        -:  811:	    }
        -:  812:	}
        -:  813:			
    #####:  814:      return 0;
        -:  815:			
        -:  816:    case remodel:
    #####:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
    #####:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  820:	{
    #####:  821:	  return -1;
        -:  822:	}
        -:  823:
    #####:  824:      gainCard(choice2, state, 0, currentPlayer);
        -:  825:
        -:  826:      //discard card from hand
    #####:  827:      discardCard(handPos, currentPlayer, state, 0);
        -:  828:
        -:  829:      //discard trashed card
    #####:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  831:	{
    #####:  832:	  if (state->hand[currentPlayer][i] == j)
        -:  833:	    {
    #####:  834:	      discardCard(i, currentPlayer, state, 0);			
    #####:  835:	      break;
        -:  836:	    }
        -:  837:	}
        -:  838:
        -:  839:
    #####:  840:      return 0;
        -:  841:		
        -:  842:    case smithy:
        -:  843:      //+3 Cards
    #####:  844:      return smithCard(state, handPos);
        -:  845:      /*for (i = 0; i < 3; i++)
        -:  846:	{
        -:  847:	  drawCard(currentPlayer, state);
        -:  848:	}
        -:  849:			
        -:  850:      //discard card from hand
        -:  851:      discardCard(handPos, currentPlayer, state, 0);
        -:  852:      return 0;*/
        -:  853:		
        -:  854:    case village:
        -:  855:      //+1 Card
    #####:  856:      drawCard(currentPlayer, state);
        -:  857:			
        -:  858:      //+2 Actions
    #####:  859:      state->numActions = state->numActions + 2;
        -:  860:			
        -:  861:      //discard played card from hand
    #####:  862:      discardCard(handPos, currentPlayer, state, 0);
    #####:  863:      return 0;
        -:  864:		
        -:  865:    case baron:
    #####:  866:      state->numBuys++;//Increase buys by 1!
    #####:  867:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  868:	int p = 0;//Iterator for hand!
    #####:  869:	int card_not_discarded = 1;//Flag for discard set!
    #####:  870:	while(card_not_discarded){
    #####:  871:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  872:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  873:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  874:	    state->discardCount[currentPlayer]++;
    #####:  875:	    for (;p < state->handCount[currentPlayer]; p++){
    #####:  876:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  877:	    }
    #####:  878:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  879:	    state->handCount[currentPlayer]--;
    #####:  880:	    card_not_discarded = 0;//Exit the loop
        -:  881:	  }
    #####:  882:	  else if (p > state->handCount[currentPlayer]){
        -:  883:	    if(DEBUG) {
        -:  884:	      printf("No estate cards in your hand, invalid choice\n");
        -:  885:	      printf("Must gain an estate if there are any\n");
        -:  886:	    }
    #####:  887:	    if (supplyCount(estate, state) > 0){
    #####:  888:	      gainCard(estate, state, 0, currentPlayer);
    #####:  889:	      state->supplyCount[estate]--;//Decrement estates
    #####:  890:	      if (supplyCount(estate, state) == 0){
    #####:  891:		isGameOver(state);
        -:  892:	      }
        -:  893:	    }
    #####:  894:	    card_not_discarded = 0;//Exit the loop
        -:  895:	  }
        -:  896:			    
        -:  897:	  else{
    #####:  898:	    p++;//Next card
        -:  899:	  }
        -:  900:	}
        -:  901:      }
        -:  902:			    
        -:  903:      else{
    #####:  904:	if (supplyCount(estate, state) > 0){
    #####:  905:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  906:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  907:	  if (supplyCount(estate, state) == 0){
    #####:  908:	    isGameOver(state);
        -:  909:	  }
        -:  910:	}
        -:  911:      }
        -:  912:	    
        -:  913:      
    #####:  914:      return 0;
        -:  915:		
        -:  916:    case great_hall:
        -:  917:      //+1 Card
    #####:  918:      return greatHallCard(state, handPos);
        -:  919:      
        -:  920:      /*drawCard(currentPlayer, state);
        -:  921:			
        -:  922:      //+1 Actions
        -:  923:      state->numActions++;
        -:  924:			
        -:  925:      //discard card from hand
        -:  926:      discardCard(handPos, currentPlayer, state, 0);
        -:  927:      return 0;*/
        -:  928:		
        -:  929:    case minion:
        -:  930:      //+1 action
    #####:  931:      state->numActions++;
        -:  932:			
        -:  933:      //discard card from hand
    #####:  934:      discardCard(handPos, currentPlayer, state, 0);
        -:  935:			
    #####:  936:      if (choice1)		//+2 coins
        -:  937:	{
    #####:  938:	  state->coins = state->coins + 2;
        -:  939:	}
        -:  940:			
    #####:  941:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  942:	{
        -:  943:	  //discard hand
    #####:  944:	  while(numHandCards(state) > 0)
        -:  945:	    {
    #####:  946:	      discardCard(handPos, currentPlayer, state, 0);
        -:  947:	    }
        -:  948:				
        -:  949:	  //draw 4
    #####:  950:	  for (i = 0; i < 4; i++)
        -:  951:	    {
    #####:  952:	      drawCard(currentPlayer, state);
        -:  953:	    }
        -:  954:				
        -:  955:	  //other players discard hand and redraw if hand size > 4
    #####:  956:	  for (i = 0; i < state->numPlayers; i++)
        -:  957:	    {
    #####:  958:	      if (i != currentPlayer)
        -:  959:		{
    #####:  960:		  if ( state->handCount[i] > 4 )
        -:  961:		    {
        -:  962:		      //discard hand
    #####:  963:		      while( state->handCount[i] > 0 )
        -:  964:			{
    #####:  965:			  discardCard(handPos, i, state, 0);
        -:  966:			}
        -:  967:							
        -:  968:		      //draw 4
    #####:  969:		      for (j = 0; j < 4; j++)
        -:  970:			{
    #####:  971:			  drawCard(i, state);
        -:  972:			}
        -:  973:		    }
        -:  974:		}
        -:  975:	    }
        -:  976:				
        -:  977:	}
    #####:  978:      return 0;
        -:  979:		
        -:  980:    case steward:
    #####:  981:      if (choice1 == 1)
        -:  982:	{
        -:  983:	  //+2 cards
    #####:  984:	  drawCard(currentPlayer, state);
    #####:  985:	  drawCard(currentPlayer, state);
        -:  986:	}
    #####:  987:      else if (choice1 == 2)
        -:  988:	{
        -:  989:	  //+2 coins
    #####:  990:	  state->coins = state->coins + 2;
        -:  991:	}
        -:  992:      else
        -:  993:	{
        -:  994:	  //trash 2 cards in hand
    #####:  995:	  discardCard(choice2, currentPlayer, state, 1);
    #####:  996:	  discardCard(choice3, currentPlayer, state, 1);
        -:  997:	}
        -:  998:			
        -:  999:      //discard card from hand
    #####: 1000:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:    case tribute:
    #####: 1004:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####: 1005:	if (state->deckCount[nextPlayer] > 0){
    #####: 1006:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1007:	  state->deckCount[nextPlayer]--;
        -: 1008:	}
    #####: 1009:	else if (state->discardCount[nextPlayer] > 0){
    #####: 1010:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1011:	  state->discardCount[nextPlayer]--;
        -: 1012:	}
        -: 1013:	else{
        -: 1014:	  //No Card to Reveal
        -: 1015:	  if (DEBUG){
        -: 1016:	    printf("No cards to reveal\n");
        -: 1017:	  }
        -: 1018:	}
        -: 1019:      }
        -: 1020:	    
        -: 1021:      else{
    #####: 1022:	if (state->deckCount[nextPlayer] == 0){
    #####: 1023:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####: 1024:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1025:	    state->deckCount[nextPlayer]++;
    #####: 1026:	    state->discard[nextPlayer][i] = -1;
    #####: 1027:	    state->discardCount[nextPlayer]--;
        -: 1028:	  }
        -: 1029:			    
    #####: 1030:	  shuffle(nextPlayer,state);//Shuffle the deck
        -: 1031:	} 
    #####: 1032:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1033:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1034:	state->deckCount[nextPlayer]--;
    #####: 1035:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1036:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1037:	state->deckCount[nextPlayer]--;
        -: 1038:      }    
        -: 1039:		       
    #####: 1040:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####: 1041:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1042:	state->playedCardCount++;
    #####: 1043:	tributeRevealedCards[1] = -1;
        -: 1044:      }
        -: 1045:
    #####: 1046:      for (i = 0; i <= 2; i ++){
    #####: 1047:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####: 1048:	  state->coins += 2;
        -: 1049:	}
        -: 1050:		    
    #####: 1051:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####: 1052:	  drawCard(currentPlayer, state);
    #####: 1053:	  drawCard(currentPlayer, state);
        -: 1054:	}
        -: 1055:	else{//Action Card
    #####: 1056:	  state->numActions = state->numActions + 2;
        -: 1057:	}
        -: 1058:      }
        -: 1059:	    
    #####: 1060:      return 0;
        -: 1061:		
        -: 1062:    case ambassador:
        -: 1063:    
        -: 1064:    
    #####: 1065:      j = 0;		//used to check if player has enough cards to discard
        -: 1066:
    #####: 1067:      if (choice2 > 2 || choice2 < 0)
        -: 1068:	{
    #####: 1069:	  return -1;				
        -: 1070:	}
        -: 1071:
    #####: 1072:      if (choice1 == handPos)
        -: 1073:	{
    #####: 1074:	  return -1;
        -: 1075:	}
        -: 1076:
    #####: 1077:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1078:	{
    #####: 1079:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -: 1080:	    {
    #####: 1081:	      j++;
        -: 1082:	    }
        -: 1083:	}
    #####: 1084:      if (j < choice2)
        -: 1085:	{
    #####: 1086:	  return -1;				
        -: 1087:	}
        -: 1088:
        -: 1089:      if (DEBUG) 
        -: 1090:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1091:
        -: 1092:      //increase supply count for choosen card by amount being discarded
    #####: 1093:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1094:			
        -: 1095:      //each other player gains a copy of revealed card
    #####: 1096:      for (i = 0; i < state->numPlayers; i++)
        -: 1097:	{
    #####: 1098:	  if (i != currentPlayer)
        -: 1099:	    {
    #####: 1100:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -: 1101:	    }
        -: 1102:	}
        -: 1103:
        -: 1104:      //discard played card from hand
    #####: 1105:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1106:
        -: 1107:      //trash copies of cards returned to supply
    #####: 1108:      for (j = 0; j < choice2; j++)
        -: 1109:	{
    #####: 1110:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1111:	    {
    #####: 1112:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -: 1113:		{
    #####: 1114:		  discardCard(i, currentPlayer, state, 1);
    #####: 1115:		  break;
        -: 1116:		}
        -: 1117:	    }
        -: 1118:	}			
        -: 1119:
    #####: 1120:      return 0;
        -: 1121:		
        -: 1122:    case cutpurse:
        -: 1123:
    #####: 1124:      updateCoins(currentPlayer, state, 2);
    #####: 1125:      for (i = 0; i < state->numPlayers; i++)
        -: 1126:	{
    #####: 1127:	  if (i != currentPlayer)
        -: 1128:	    {
    #####: 1129:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1130:		{
    #####: 1131:		  if (state->hand[i][j] == copper)
        -: 1132:		    {
    #####: 1133:		      discardCard(j, i, state, 0);
    #####: 1134:		      break;
        -: 1135:		    }
    #####: 1136:		  if (j == state->handCount[i])
        -: 1137:		    {
    #####: 1138:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1139:			{
        -: 1140:			  if (DEBUG)
        -: 1141:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1142:			}	
    #####: 1143:		      break;
        -: 1144:		    }		
        -: 1145:		}
        -: 1146:					
        -: 1147:	    }
        -: 1148:				
        -: 1149:	}				
        -: 1150:
        -: 1151:      //discard played card from hand
    #####: 1152:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1153:
    #####: 1154:      return 0;
        -: 1155:
        -: 1156:		
        -: 1157:    case embargo: 
        -: 1158:      
    #####: 1159:      return embargoCard(state, handPos, choice1);
        -: 1160:      /*
        -: 1161:      //+2 Coins
        -: 1162:      state->coins = state->coins + 2;
        -: 1163:			
        -: 1164:      //see if selected pile is in play
        -: 1165:      if ( state->supplyCount[choice1] == -1 )
        -: 1166:	{
        -: 1167:	  return -1;
        -: 1168:	}
        -: 1169:			
        -: 1170:      //add embargo token to selected supply pile
        -: 1171:      state->embargoTokens[choice1]++;
        -: 1172:			
        -: 1173:      //trash card
        -: 1174:      discardCard(handPos, currentPlayer, state, 1);		
        -: 1175:      return 0;*/
        -: 1176:		
        -: 1177:    case outpost:
        -: 1178:      //set outpost flag
    #####: 1179:      state->outpostPlayed++;
        -: 1180:			
        -: 1181:      //discard card
    #####: 1182:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1183:      return 0;
        -: 1184:		
        -: 1185:    case salvager:
        -: 1186:      //+1 buy
    #####: 1187:      state->numBuys++;
        -: 1188:			
    #####: 1189:      if (choice1)
        -: 1190:	{
        -: 1191:	  //gain coins equal to trashed card
    #####: 1192:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1193:	  //trash card
    #####: 1194:	  discardCard(choice1, currentPlayer, state, 1);	
        -: 1195:	}
        -: 1196:			
        -: 1197:      //discard card
    #####: 1198:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1199:      return 0;
        -: 1200:		
        -: 1201:    case sea_hag:
    #####: 1202:      for (i = 0; i < state->numPlayers; i++){
    #####: 1203:	if (i != currentPlayer){
    #####: 1204:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1205:	  state->discardCount[i]++;
    #####: 1206:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1207:	}
        -: 1208:      }
    #####: 1209:      return 0;
        -: 1210:		
        -: 1211:    case treasure_map:
        -: 1212:      //search hand for another treasure_map
    #####: 1213:      index = -1;
    #####: 1214:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1215:	{
    #####: 1216:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1217:	    {
    #####: 1218:	      index = i;
    #####: 1219:	      break;
        -: 1220:	    }
        -: 1221:	}
    #####: 1222:      if (index > -1)
        -: 1223:	{
        -: 1224:	  //trash both treasure cards
    #####: 1225:	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1226:	  discardCard(index, currentPlayer, state, 1);
        -: 1227:
        -: 1228:	  //gain 4 Gold cards
    #####: 1229:	  for (i = 0; i < 4; i++)
        -: 1230:	    {
    #####: 1231:	      gainCard(gold, state, 1, currentPlayer);
        -: 1232:	    }
        -: 1233:				
        -: 1234:	  //return success
    #####: 1235:	  return 1;
        -: 1236:	}
        -: 1237:			
        -: 1238:      //no second treasure_map found in hand
    #####: 1239:      return -1;
        -: 1240:    }
        -: 1241:	
    #####: 1242:  return -1;
        -: 1243:}
        -: 1244:
        1: 1245:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1246:{
        -: 1247:	
        -: 1248:  //if card is not trashed, added to Played pile 
        1: 1249:  if (trashFlag < 1)
        -: 1250:    {
        -: 1251:      //add card to played pile
        1: 1252:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        1: 1253:      state->playedCardCount++;
        -: 1254:    }
        -: 1255:	
        -: 1256:  //set played card to -1
        1: 1257:  state->hand[currentPlayer][handPos] = -1;
        -: 1258:	
        -: 1259:  //remove card from player's hand
        1: 1260:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1261:    {
        -: 1262:      //reduce number of cards in hand
    #####: 1263:      state->handCount[currentPlayer]--;
        -: 1264:    }
        1: 1265:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1266:    {
        -: 1267:      //reduce number of cards in hand
    #####: 1268:      state->handCount[currentPlayer]--;
        -: 1269:    }
        -: 1270:  else 	
        -: 1271:    {
        -: 1272:      //replace discarded card with last card in hand
        1: 1273:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1274:      //set last card to -1
        1: 1275:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1276:      //reduce number of cards in hand
        1: 1277:      state->handCount[currentPlayer]--;
        -: 1278:    }
        -: 1279:	
        1: 1280:  return 0;
        -: 1281:}
        -: 1282:
    #####: 1283:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1284:{
        -: 1285:  //Note: supplyPos is enum of choosen card
        -: 1286:	
        -: 1287:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1288:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1289:    {
    #####: 1290:      return -1;
        -: 1291:    }
        -: 1292:	
        -: 1293:  //added card for [whoseTurn] current player:
        -: 1294:  // toFlag = 0 : add to discard
        -: 1295:  // toFlag = 1 : add to deck
        -: 1296:  // toFlag = 2 : add to hand
        -: 1297:
    #####: 1298:  if (toFlag == 1)
        -: 1299:    {
    #####: 1300:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1301:      state->deckCount[player]++;
        -: 1302:    }
    #####: 1303:  else if (toFlag == 2)
        -: 1304:    {
    #####: 1305:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1306:      state->handCount[player]++;
        -: 1307:    }
        -: 1308:  else
        -: 1309:    {
    #####: 1310:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1311:      state->discardCount[player]++;
        -: 1312:    }
        -: 1313:	
        -: 1314:  //decrease number in supply pile
    #####: 1315:  state->supplyCount[supplyPos]--;
        -: 1316:	 
    #####: 1317:  return 0;
        -: 1318:}
        -: 1319:
        2: 1320:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1321:{
        -: 1322:  int i;
        -: 1323:	
        -: 1324:  //reset coin count
        2: 1325:  state->coins = 0;
        -: 1326:
        -: 1327:  //add coins for each Treasure card in player's hand
       12: 1328:  for (i = 0; i < state->handCount[player]; i++)
        -: 1329:    {
       10: 1330:      if (state->hand[player][i] == copper)
        -: 1331:	{
        8: 1332:	  state->coins += 1;
        -: 1333:	}
        2: 1334:      else if (state->hand[player][i] == silver)
        -: 1335:	{
    #####: 1336:	  state->coins += 2;
        -: 1337:	}
        2: 1338:      else if (state->hand[player][i] == gold)
        -: 1339:	{
    #####: 1340:	  state->coins += 3;
        -: 1341:	}	
        -: 1342:    }	
        -: 1343:
        -: 1344:  //add bonus
        2: 1345:  state->coins += bonus;
        -: 1346:
        2: 1347:  return 0;
        -: 1348:}
        -: 1349:
        -: 1350:
        -: 1351://bug: only draw 2 cards
    #####: 1352:int smithCard( struct gameState *state, int handPos) {
        -: 1353:  
        -: 1354:  //we need the currentPlayer
    #####: 1355:  int currentPlayer = whoseTurn(state);
    #####: 1356:  int i = 0;
        -: 1357:  
    #####: 1358:  for (i = 0; i < 3; i++) //bug: only draw 2 cards
        -: 1359:	{
    #####: 1360:	  drawCard(currentPlayer, state);
        -: 1361:	}
        -: 1362:			
        -: 1363:      //discard card from hand
    #####: 1364:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1365:      return 0;
        -: 1366:  
        -: 1367:  
        -: 1368:}
        -: 1369:
    #####: 1370:int adventurerCard(struct gameState *state) {
    #####: 1371:    int currentPlayer = whoseTurn(state);
    #####: 1372:    int drawntreasure = 0;
        -: 1373:    int temphand[MAX_HAND];
    #####: 1374:    int z = 0;// this is the counter for the temp hand
        -: 1375:    int cardDrawn;
        -: 1376:    
    #####: 1377:      while(drawntreasure<2){
    #####: 1378:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1379:	  shuffle(currentPlayer, state);
        -: 1380:	}
    #####: 1381:	drawCard(currentPlayer, state);
    #####: 1382:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
    #####: 1383:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
    #####: 1384:	  drawntreasure++;
        -: 1385:	else{
    #####: 1386:	  temphand[z]=cardDrawn;
    #####: 1387:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1388:	  z++;
        -: 1389:	}
        -: 1390:      }
    #####: 1391:      while(z-1>=0){
    #####: 1392:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1393:	z=z-1;
        -: 1394:      }
    #####: 1395:      return 0;
        -: 1396:      
        -: 1397:    }
        -: 1398:    
        -: 1399:    
        -: 1400:    //bug is no increase in actions
    #####: 1401:int greatHallCard(struct gameState *state, int handPos) {
    #####: 1402:      int currentPlayer = whoseTurn(state);
    #####: 1403:      drawCard(currentPlayer, state);
        -: 1404:			
        -: 1405:      //+1 Actions
        -: 1406:      //state->numActions++; // bug is no increase in actions
        -: 1407:			
        -: 1408:      //discard card from hand
    #####: 1409:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1410:      return 0;
        -: 1411:} 
        -: 1412:
        -: 1413:
        -: 1414:
        -: 1415://bug is to only give 2 cards
        1: 1416:int councilRoomCard(struct gameState *state, int handPos) {
        -: 1417:      
        -: 1418:    int i;
        1: 1419:    int currentPlayer = whoseTurn(state);
        -: 1420:      
        -: 1421:      //+4 Cards
        3: 1422:      for (i = 0; i < 2; i++) //bug is to only give 2 cards
        -: 1423:	{
        2: 1424:	  drawCard(currentPlayer, state);
        -: 1425:	}
        -: 1426:			
        -: 1427:      //+1 Buy
        1: 1428:      state->numBuys++;
        -: 1429:			
        -: 1430:      //Each other player draws a card
        3: 1431:      for (i = 0; i < state->numPlayers; i++)
        -: 1432:	{
        2: 1433:	  if ( i != currentPlayer )
        -: 1434:	    {
        1: 1435:	      drawCard(i, state);
        -: 1436:	    }
        -: 1437:	}
        -: 1438:			
        -: 1439:      //put played card in played card pile
        1: 1440:      discardCard(handPos, currentPlayer, state, 0);
        -: 1441:			
        1: 1442:      return 0;
        -: 1443:}
        -: 1444:
        -: 1445://bug: only add 1 coin
    #####: 1446:int embargoCard(struct gameState *state, int handPos, int choice1) {
        -: 1447:      
    #####: 1448:      int currentPlayer = whoseTurn(state);
        -: 1449:      //+2 Coins
    #####: 1450:      state->coins = state->coins + 1; //bug: only add 1 coin
        -: 1451:			
        -: 1452:      //see if selected pile is in play
    #####: 1453:      if ( state->supplyCount[choice1] == -1 )
        -: 1454:	{
    #####: 1455:	  return -1;
        -: 1456:	}
        -: 1457:			
        -: 1458:      //add embargo token to selected supply pile
    #####: 1459:      state->embargoTokens[choice1]++;
        -: 1460:			
        -: 1461:      //trash card
    #####: 1462:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1463:      return 0;
        -: 1464:}
        -: 1465:
        -: 1466://end of dominion.c
        -: 1467:
